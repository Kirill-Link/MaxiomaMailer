import imaplib
import email
from email.header import decode_header
import mysql.connector
import re

mydb = mysql.connector.connect(
    host="localhost",
    user="bot",
    password="bot",
    database="bot"
)

# Создаем объект курсора для выполнения SQL-запросов
cursor = mydb.cursor(dictionary=True)  # Указываем dictionary=True для получения словарей

# Выполняем SQL-запрос
cursor.execute("SELECT * FROM bottable")

# Получаем результаты запроса в виде словарей
results = cursor.fetchall()

# Печатаем результаты (словари)
for row in results:
    print(row)

# Закрываем курсор и соединение
cursor.close()
mydb.close()


while True:
    for row in results:
        # Подключение к почтовому серверу через IMAP
        mail = imaplib.IMAP4_SSL('imap.mail.ru')
        mail.login('smyshiyaev@mail.ru', 'dncYy9DE5EGYEEw2DEBm')

        # Выбор папки inbox (или любой другой папки, в которой вы ищете письма)
        mail.select('inbox')

        # Поиск писем от определенного отправителя
    
        # sender_email = 'kapatel2001@list.ru'
        # result, data = mail.search(None, '(HEADER FROM "{}")'.format(sender_email))

        result, data = mail.search(None, 'ALL')
        email_ids = data[0].split()

        # Получение информации о последнем пришедшем письме
        latest_email_id = email_ids[-1]  # Последний элемент в списке email_ids - это ID последнего письма
        result, email_data = mail.fetch(latest_email_id, '(RFC822)')

        # Парсинг данных о письме
        raw_email = email_data[0][1]
        msg = email.message_from_bytes(raw_email)
        from_address = msg['From']

        match = re.search(r'<([^>]+)>', from_address)

        # Проверяем, найдено ли совпадение
        if match:
            email_address = match.group(1)  # Получаем email-адрес из первой группы совпадений
            if email_address == row['email']:
                if data[0]:
                    email_ids = data[0].split()
                    for email_id in email_ids:
                    # Перемещение письма в другую папку (например, "назначенная_папка")
                        mail.copy(email_id, f'inbox/{row["folder"]}')
                        mail.store(email_id, '+FLAGS', '(\Deleted)')  # Помечаем письмо как удаленное
                        mail.expunge()  # Удаляем все помеченные как удаленные письма
                    print(f"Письма от {sender_email} перемещены в назначенную папку.")

        else:
            print("Email-адрес не найден в строке.")

        mail.close()
        mail.logout()
